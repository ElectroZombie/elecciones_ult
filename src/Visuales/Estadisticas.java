/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Visuales;

import Clases_De_Proyecto.Candidato;
import Clases_De_Proyecto.Elecc;
import Base_de_Datos.Gestion;
import Utiles.Entero;
import Utiles.Tupla;
import Operaciones.Operaciones_de_candidatos;
import Utiles.Bloqueo;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
 
/**
 *
 * @author Joan Manuel
 */
public class Estadisticas extends javax.swing.JFrame {

    Elecc E;
    Gestion G = new Gestion();
    Bloqueo BLO;
    /**
     * Creates new form NewJFrame
     * @param E
     */
    public Estadisticas(Elecc E) {
        initComponents();
        setTitle("Elecciones Estudiantiles: Estadísticas: "+ E.getUniversidad() + " " + G.devolver_nombre(E) + " " + E.getAnno());
        setResizable(false);
         setLocationRelativeTo(null);
         this.E = E;
    }
    
     public Estadisticas(Elecc E, Bloqueo BLO) {
        initComponents();
        setTitle("Elecciones Estudiantiles: Estadísticas de: "+ E.getUniversidad() + " " + G.devolver_nombre(E) + " " + E.getAnno());
        setResizable(false);
         setLocationRelativeTo(null);
         this.E = E;
         this.BLO = BLO;
         this.BLO.bloquear_A();
    }
    
  
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Generar_reporte = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setIconImage(getIconImage());
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 0)));

        Generar_reporte.setBackground(new java.awt.Color(102, 102, 102));
        Generar_reporte.setText("Generar Reporte");
        Generar_reporte.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Generar_reporteMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 540, Short.MAX_VALUE)
                .addComponent(Generar_reporte, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(406, Short.MAX_VALUE)
                .addComponent(Generar_reporte, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Generar_reporteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Generar_reporteMouseClicked
        
       setLocation(323, 120);
       
         
          Document pdf = new Document();
          try{
              Robot robot = new Robot();
              String ruta = System.getProperty("user.home");
             
           //Crear la primera captura de pantalla
          BufferedImage imagen = robot.createScreenCapture(new Rectangle(jPanel1.getX() + 510, jPanel1.getY() + 140, 450, 250));
        File imagen1 = new File(ruta + "/Desktop/imagen1.jpg");
        ImageIO.write(imagen, "jpg", imagen1);
        com.itextpdf.text.Image imagen12 = com.itextpdf.text.Image.getInstance(ruta + "/Desktop/imagen1.jpg");
        imagen12.setAlignment(Chunk.ALIGN_CENTER);

        //Crear la segunda captura de pantalla
        BufferedImage imagen2 = robot.createScreenCapture(new Rectangle(jPanel1.getX() + 330, jPanel1.getY() + 400, 550, 140));
        File imagen11 = new File(ruta + "/Desktop/imagen2.jpg");
        ImageIO.write(imagen2, "jpg", imagen11);
        com.itextpdf.text.Image imagen123 = com.itextpdf.text.Image.getInstance(ruta + "/Desktop/imagen2.jpg");
        imagen123.setAlignment(Chunk.ALIGN_CENTER);
        jPanel1.setBackground(new Color(51,204,255));
              
             
              
          //Crear PDF
          
          String sol = "";
          if(E.getTipo_de_eleccion().equals("Universidad")){
       sol = "Proceso Electoral de " + E.getUniversidad() + " " + E.getAnno();
       }
       else{
       sol = "Proceso Electoral de " + E.getUniversidad() + " " + G.devolver_nombre(E) + " " + E.getAnno();
       }
          
          PdfWriter.getInstance(pdf, new FileOutputStream(ruta + "/Desktop/" + sol + ".pdf"));
          pdf.open();  
       //crear la primera tabla
        PdfPTable tabla1 = new PdfPTable(4);
        tabla1.addCell("Candidato");
        tabla1.addCell("Carrera");
        tabla1.addCell("Año");
        tabla1.addCell("Miembro");

        //crear la segunda tabla
        PdfPTable tabla2 = new PdfPTable(4);
        tabla2.addCell("Candidato");
        tabla2.addCell("Carrera");
        tabla2.addCell("Año");
        tabla2.addCell("Presidente");

        //organizar de menor a mayor
        Vector<Tupla<Candidato, Tupla<Entero, Entero>>> V = Operaciones_de_candidatos.organizar_candidatos_por_votos(E, 0);

        //llenar la prmera tabla
        for (int i = V.size() - 1; i >= 0; i--) {
            String nombreMiembro = V.elementAt(i).getN1().getNombre();
            tabla1.addCell(nombreMiembro);
            String CarreraMiembro = V.elementAt(i).getN1().getCarrera();
            tabla1.addCell(CarreraMiembro);
            int annoMiembro = V.elementAt(i).getN1().getAño();
            tabla1.addCell(Integer.toString(annoMiembro));
            int votosMiembro = V.elementAt(i).getN2().getN1().getEntero();
            tabla1.addCell(Integer.toString(votosMiembro));
        }

         V = Operaciones_de_candidatos.organizar_candidatos_por_votos(E, 1);
        //Lenar la segunda tabla
        for (int i = V.size() - 1; i >= 0; i--) {
            String nombreMiembro = V.elementAt(i).getN1().getNombre();
            tabla2.addCell(nombreMiembro);
            String CarreraMiembro = V.elementAt(i).getN1().getCarrera();
            tabla2.addCell(CarreraMiembro);
            int annoMiembro = V.elementAt(i).getN1().getAño();
            tabla2.addCell(Integer.toString(annoMiembro));
            int votosPresidente = V.elementAt(i).getN2().getN2().getEntero();
            tabla2.addCell(Integer.toString(votosPresidente));
        }
           
      //banner para el pdf
     
            com.itextpdf.text.Image banner=com.itextpdf.text.Image.getInstance(ClassLoader.getSystemResource("imagenes/feu.png"));
          banner.setAlignment(Chunk.ALIGN_CENTER);
       //crear todos los paragrap necesarios
       Paragraph intro = new Paragraph("");
       if(E.getTipo_de_eleccion().equals("Universidad")){
       intro = new Paragraph("Proceso Electoral \n de \n" + E.getUniversidad() + "\n " + E.getAnno());
       }
       else{
       intro = new Paragraph("Proceso Electoral \n de \n" + E.getUniversidad() + "\n " + G.devolver_nombre(E) + "\n " + E.getAnno());    
       }
       intro.setAlignment(Paragraph.ALIGN_CENTER);
        Paragraph mATRICULA = new Paragraph("Matrícula: " + E.getMatricula());
        Paragraph votos = new Paragraph("Votos totales: " + E.getVotos());
        Paragraph p = new Paragraph("Orden según votos por miembro");
          p.setAlignment(Paragraph.ALIGN_CENTER);
        Paragraph pa = new Paragraph("Orden según votos por presidente");
        pa.setAlignment(Paragraph.ALIGN_CENTER);  
      Paragraph grafico1= new Paragraph("Estadísticas de las boletas");
      grafico1.setAlignment(Paragraph.ALIGN_CENTER);  
      Paragraph grafico2= new Paragraph("Estadísticas de la asistencia al voto"); 
      grafico2.setAlignment(Paragraph.ALIGN_CENTER);     
      
        pdf.add(banner);
        pdf.add(intro);
        pdf.add(mATRICULA);
        pdf.add(votos);
       // pdf.add(new Paragraph("\n"));
        pdf.add(grafico1);
        //pdf.add(new Paragraph("\n"));
        pdf.add(imagen12);
        pdf.add(new Paragraph("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"));
        pdf.add(grafico2);
        pdf.add(new Paragraph("\n"));
        pdf.add(new Paragraph("\n\n"));
        pdf.add(imagen123);
        pdf.add(new Paragraph("\n\n"));
        pdf.add(p);
         pdf.add(new Paragraph("\n"));
        pdf.add(tabla1);
        pdf.add(new Paragraph("\n"));
        pdf.add(pa);
         pdf.add(new Paragraph("\n"));
        pdf.add(tabla2);
        imagen1.delete();
        imagen11.delete();
     
          }catch (AWTException | IOException | BadElementException ex) {
            Logger.getLogger(Estadisticas.class.getName()).log(Level.SEVERE, null, ex);
        } catch (DocumentException ex) {
            Logger.getLogger(Estadisticas.class.getName()).log(Level.SEVERE, null, ex);
        }
          pdf.close();
            try{
                 BLO.desbloquear_A();
             }
            catch(NullPointerException e){}

            this.dispose();
    }//GEN-LAST:event_Generar_reporteMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        BLO.desbloquear_A();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Generar_reporte;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
 @Override
    public void paint(Graphics g) {
        super.paint(g);
                  
         g.setColor(new Color(153,153,153));
         g.fillRect(jPanel1.getX(), jPanel1.getY(), 700, 461);
         g.setColor(new Color(0,0,0));
         
                  DecimalFormat df2 = new DecimalFormat("#.00");
                  
            int boletas_validas = E.getVotos() - E.getCantidad_de_boletas_en_blanco() - E.getCantidad_de_boletas_invalidas();
            int total_de_voletas = E.getVotos();

            double grados_boletas_en_blanco = (double) (E.getCantidad_de_boletas_en_blanco() * 360) / (double) (total_de_voletas);
            double grados_boletas_invalidas = (double) (E.getCantidad_de_boletas_invalidas() * 360) / (double) (total_de_voletas);
            double grados_boletas_validas = (double) (boletas_validas * 360) / (double) (total_de_voletas);

            double porciento_en_blanco = (double) (E.getCantidad_de_boletas_en_blanco() * 100) / (double) (total_de_voletas);
            double porciento_invalidas = (double) (E.getCantidad_de_boletas_invalidas() * 100) / (double) (total_de_voletas);
            double porciento_en_validas = (double) (boletas_validas * 100) / (double) (total_de_voletas);
             
             
            
            g.drawString("Boletas en Blanco: " + E.getCantidad_de_boletas_en_blanco() + "(" + df2.format(porciento_en_blanco) + "%)", 450, 95);
            g.setColor(new Color(255, 0, 0));
            g.fillArc(200, 40, 200, 200, 0, (int) (grados_boletas_en_blanco));
            g.fillRect(420, 80, 20, 20);

            g.setColor(new Color(0, 0, 0));
            g.drawString("Boletas Inválidas: " + E.getCantidad_de_boletas_invalidas() + "(" + df2.format(porciento_invalidas) + "%)", 450, 135);
            g.setColor(new Color(0, 255, 0));
            g.fillArc(200, 40, 200, 200, (int) grados_boletas_en_blanco, (int) grados_boletas_invalidas);
            g.fillRect(420, 120, 20, 20);

            g.setColor(new Color(0, 0, 0));
            g.drawString("Boletas Válidas: " + (E.getVotos() - E.getCantidad_de_boletas_en_blanco() - E.getCantidad_de_boletas_invalidas()) + "(" +  df2.format(porciento_en_validas) + "%)", 450, 175);
            g.setColor(new Color(0, 0, 255));
            g.fillArc(200, 40, 200, 200, (int) grados_boletas_en_blanco + (int) grados_boletas_invalidas, (int) grados_boletas_validas);
            g.fillRect(420, 160, 20, 20);

            int total_de_votos = E.getMatricula();
            int cantidad_que_voto = total_de_votos - E.getVotos();
            int cantidad_que_no_voto = E.getVotos();
            
            double porcentaje_que_no_voto = (double) (cantidad_que_no_voto * 100) / (double) (total_de_votos);
            double porcentaje_que_voto = (double) (cantidad_que_voto * 100) / (double) total_de_votos;
              
              
            int largo_contidad_que_voto = cantidad_que_voto * 500 / total_de_votos;
            int largo_contidad_que_no_voto = cantidad_que_no_voto * 500 / total_de_votos;
            
             
             
            g.setColor(new Color(0, 255, 0));
            g.fillRect(50, 300, largo_contidad_que_no_voto, 50);
            g.fillRect(55, 360, 20, 20);
            g.setColor(new Color(0, 0, 0));
            g.drawString("Porcentaje de Asistencia al Voto " + df2.format(porcentaje_que_no_voto) + " %", 80, 375);

            g.setColor(new Color(255, 0, 0));
            g.fillRect(50 + largo_contidad_que_no_voto, 300, largo_contidad_que_voto, 50);
            g.fillRect(55, 390, 20, 20);
            g.setColor(new Color(0, 0, 0));
            g.drawString("Porcentaje de Inasistencia al Voto " + df2.format(porcentaje_que_voto) + " %", 80, 405);

            g.drawString("Matrícula: " + total_de_votos + "", 50, 50);
            g.drawString("Total de Votos: " + E.getVotos() + "", 50, 100);
  
    }
    @Override
    public Image getIconImage(){
    Image retValue=Toolkit.getDefaultToolkit().getImage(ClassLoader.getSystemResource("imagenes/eleccion.png"));
    return retValue;
    
    }
        
    
    public javax.swing.JButton getButton(){
        return Generar_reporte;
    }
}
